#!/usr/bin/perl

# loadsubscribers.pl - This script loads a CSV-file
# (generated by mailman2sympa) in a Database
#
# Copyright (c) 2002 Andreas de Pretis for
#                    Uptime Systemloesungen GmbH and
#                    t0 Institut fuer neue Kulturtechnologien
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

#
# Pragmas
#
use strict;
use diagnostics;

#
# Classes
#
use DBI qw(:sql_types);
use POSIX qw(strftime);
#
# Variables
#
my $listname;
my $dbh;
my $dbhnew;
my $dbh_csv;
my $date_func;
my $query_users_ins;
my $query_users_sel;
my $query_subscribers;
my $query_csv;
my $sth_csv;
my $sth_users_ins;
my $sth_users_sel;
my $sth_subscribers;
my $resetted = {};

my $query_admins;
my $sth_admins;
my $email_name;

#
# Load ENV
#
&getConfig();

#
# connect to database
#
&db_connect();

#
# Clean tables
#
if (exists($ENV{'CLEANTABLES'}) && defined($ENV{'CLEANTABLES'}) && $ENV{'CLEANTABLES'} == 1) {
	print STDOUT "#### deleteing user_table and subscriber_table ####\n";

	eval {
		$dbhnew->do("DELETE FROM user_table");
		$dbhnew->do("DELETE FROM subscriber_table");
	};

	if ($@) {
		$dbhnew->rollback();
		die "Error: $@\n";
	} else {
		$dbhnew->commit();
	}
}

print STDOUT "#### importing ####\n";

#
# SQL-Statements
#
eval {
	#
	# CSV-Users
	#
	$query_csv	= qq!
		SELECT email_user, gecos_user, password_user from users
		!;
	$sth_csv	= $dbh_csv->prepare($query_csv);

	#
	# Users
	#
	$query_users_sel	= qq!
		SELECT gecos_user
		  FROM user_table
		 WHERE email_user like ?
		!;
	$sth_users_sel		= $dbh->prepare($query_users_sel);
		
	$query_users_ins	= qq!
		INSERT INTO user_table (email_user, gecos_user, password_user)
		     VALUES (?, ?, ?)
		!;
	$sth_users_ins		= $dbhnew->prepare($query_users_ins);


	#
	# Execute
	#
	$sth_csv->execute();
	
	while (my ($email, $username, $password) = $sth_csv->fetchrow_array()) {
		#
		# Check for existing user
		#
		if (!exists($resetted->{$email}) && !defined($resetted->{$email})) {
			$sth_users_sel->bind_param(1, $email, SQL_VARCHAR);
			$sth_users_sel->execute();
	
			if ($sth_users_sel->rows()) {
				if ($ENV{'RESET_PASSWORDS'} == 1) {
					my $sth;
					my $query;
					
					if ($ENV{'DATABASE'} == $ENV{'NEW_DATABASE'}) {
						print STDOUT " - user '$email' already exists (setting password to null)\n";
						$query = qq!
							UPDATE user_table
							   SET password_user = null
							 WHERE email_user like ?
							!;
						
						$sth = $dbh->prepare($query);
						$sth->bind_param(1, $email, SQL_VARCHAR);
						$sth->execute();
						$sth->finish();
						$dbh->commit();
					} else {
						print STDOUT " - user '$email' already exists (pretending to set password to null)\n";
					}
				
				} else {
					print STDOUT " - user '$email' already exists (skipping)\n";
				}
				$resetted->{$email} = 1;
			} else {
				$sth_users_ins->bind_param(1, $email, SQL_VARCHAR);
				$sth_users_ins->bind_param(2, $username, SQL_VARCHAR);
				$sth_users_ins->bind_param(3, $password, SQL_VARCHAR);
				$sth_users_ins->execute();
			}
		}
	}
	$dbhnew->commit();
	$sth_users_ins->finish();
	$sth_csv->finish();

	print STDOUT "\nFinished with users - now handling their subscription\n";
	#
	# CSV-Subscribers
	#
	$query_csv	= qq!
		SELECT list_subscriber, email_subscriber, geos_subscriber, date_subscriber, visibility_subscriber,reception_subscriber from subscribers
		!;
	$sth_csv	= $dbh_csv->prepare($query_csv);

	#
	# Execute subscribers
	#

	#
	# Subscribers
	#
	# date_subscriber & update_subscriber (datetime) was obsoleted.
	# Use date_epoch_subscriber & update_epoch_subscriber (int).
	$query_subscribers	= qq!
		INSERT INTO subscriber_table (list_subscriber, user_subscriber, comment_subscriber, date_epoch_subscriber, reception_subscriber, visibility_subscriber, robot_subscriber, subscribed_subscriber)
		     VALUES (?, ?, ?, ?, ?, ?, ?, 1)
		!;
	$sth_subscribers	= $dbhnew->prepare($query_subscribers);
	$sth_subscribers->bind_param(7, $ENV{'DOMAIN'}, SQL_VARCHAR);

	$sth_csv->execute();

	while (my ($list, $user, $comment, $date, $visiblity, $reception) = $sth_csv->fetchrow_array()) {
		$sth_subscribers->bind_param(1, $list, SQL_VARCHAR);
		$sth_subscribers->bind_param(2, $user, SQL_VARCHAR);
		$sth_subscribers->bind_param(3, $comment, SQL_VARCHAR);
		$sth_subscribers->bind_param(4, $date, SQL_TIMESTAMP);
		$sth_subscribers->bind_param(5, $reception, SQL_VARCHAR);
		$sth_subscribers->bind_param(6, $visiblity, SQL_VARCHAR);
		$sth_subscribers->execute();
	}

	$dbhnew->commit();
	$sth_csv->finish();
	$sth_subscribers->finish();


	print STDOUT "\nFinished with subscriptions  - now handling list admins and moderators\n";

	#
	# Admins
	#
	# date_admin & update_admin (datetime) was obsoleted.
	# Use date_epoch_admin & update_epoch_admin (int).

	$query_admins	= qq!
		INSERT INTO admin_table (comment_admin, date_epoch_admin, list_admin, profile_admin, reception_admin, robot_admin, role_admin, subscribed_admin, update_epoch_admin, user_admin)
		     VALUES (?, ?, ?, 'privileged', 'mail', ?, ?, 1, ?, ?)
		!;
	$sth_admins	= $dbhnew->prepare($query_admins);
	$sth_admins->bind_param(4, $ENV{'DOMAIN'}, SQL_VARCHAR);
	$sth_admins->bind_param(2, strftime("%F %T", localtime), SQL_TIMESTAMP);
	$sth_admins->bind_param(6, strftime("%F %T", localtime), SQL_TIMESTAMP);

        $query_csv      = qq!
                SELECT email_admin,role_admin,list_admin from admins
                !;
        $sth_csv        = $dbh_csv->prepare($query_csv);
	$sth_csv->execute();


	while (my ($email, $role, $list) = $sth_csv->fetchrow_array()) {

		$sth_admins->bind_param(7, $email, SQL_VARCHAR);
		$sth_admins->bind_param(5, $role, SQL_VARCHAR);
		$sth_admins->bind_param(3, $list, SQL_VARCHAR);
		#$sth_admins->bind_param(1, undef, SQL_VARCHAR);
		$sth_users_sel->bind_param(1, $email, SQL_VARCHAR);
		$sth_users_sel->execute();
		$email_name = $sth_users_sel->fetchrow_array();
		if ($email_name) {
			print STDOUT "admin $email found with name $email_name\n";
		}
		$sth_admins->bind_param(1, $email_name, SQL_VARCHAR);
		$sth_admins->execute();
	}
	$sth_csv->finish();
	$sth_users_sel->finish();
	$dbhnew->commit();
	$sth_admins->finish();
	
};

#
# Exception-Handling
#
if ($@) {
	$dbh->rollback();
	$sth_csv->finish();
	$sth_users_ins->finish();
	$sth_users_sel->finish();
	$sth_subscribers->finish();
	$sth_admins->finish();
	die "Error: $@";
} else {
	# $dbh->commit();
	$dbhnew->commit();
}

if ($ENV{'RESET_PASSWORDS'} == 1 && $ENV{'DATABASE'} != $ENV{'NEW_DATABASE'}) {
	print "\n\nPasswords resetted to null: " . keys (%{$resetted}) . "\n";
}

#
# disconnect from database
#
&db_disconnect();

#
# getConfig
#
sub getConfig
	{
	my @env 	= qx|. ./conf/mailman2sympa.conf;set|;

	#
	# Import ENV from mailman2sympa.conf into Perl-ENV
	#
        foreach my $env (@env)
        	{
                chomp $env;
                $env =~ /^\s*(.*?)\s*=\s*(.*)/;
                
                unless (exists($ENV{$1}) || $1 eq 'SHELLOPTS')
                	{
                        my $name	= $1;
                        my $value	= $2;
                        
                        if ($value =~ /^\'(.*)\'$/)
                        	{
                                $value = $1;
                        	}
                        	
                        $ENV{$name} = $value;
                	}
                }
	}

#
# db_connect
#
sub db_connect {
	my $db_type	= $ENV{'SGBD'};
	my $db_name	= $ENV{'DATABASE'};
	my $db_newname	= $ENV{'NEW_DATABASE'};
	my $db_host	= $ENV{'HOSTDB'};
	my $db_user	= $ENV{'USERDB'};
	my $db_passwd	= $ENV{'PASSWORDDB'};

	unless ($dbh = DBI->connect("dbi:$db_type:dbname=$db_name;host=$db_host", $db_user, $db_passwd, { RaiseError => 1, AutoCommit => 0 })) {
		die "Can't connect to Database :", $DBI::errstr;
	}
	unless ($dbhnew = DBI->connect("dbi:$db_type:dbname=$db_newname;host=$db_host", $db_user, $db_passwd, { RaiseError => 1, AutoCommit => 0 })) {
		die "Can't connect to Database :", $DBI::errstr;
	}

	unless ($dbh_csv = DBI->connect("dbi:CSV:f_dir=$ENV{'WDIR'}/csv", { RaiseError => 1, AutoCommit => 0 })) {
		die "Can't connect to CSV-Directory :", $DBI::errstr;
	}

	$dbh_csv->{'csv_tables'}->{'users'}= {
		'file'			=> 'import_users.csv',
		'sep_char' 		=> ";",
		'eol'			=> "\n",
		'col_names'		=> [
			'email_user',
			'gecos_user',
			'password_user',
			],
		};

	$dbh_csv->{'csv_tables'}->{'subscribers'} = {
		'file'			=> 'import_subscribers.csv',
		'sep_char' 		=> ";",
		'eol'			=> "\n",
		'col_names'		=> [
			'list_subscriber',
			'email_subscriber',
			'geos_subscriber',
			'date_subscriber',
			'visibility_subscriber',
			'reception_subscriber',
			'bounce_subscriber',
			'comment_subscriber',
			'subscribed_subscriber',
			'included_subscriber',
			'include_sources_subscriber',
			],
		};
	$dbh_csv->{'csv_tables'}->{'admins'}= {
		'file'			=> 'import_admins.csv',
		'sep_char' 		=> ";",
		'eol'			=> "\n",
		'col_names'		=> [
			'email_admin',
			'role_admin',
			'list_admin',
			],
		};

}

#
# db_disconnect
#
sub db_disconnect {
	$dbh->disconnect();
	$dbhnew->disconnect();
	$dbh_csv->disconnect();
}
